// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (url)
DO NOTHING
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}

const getPostListForUser = `-- name: GetPostListForUser :many
SELECT posts.title, posts.url, posts.description FROM posts
    JOIN feed_follows on posts.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
`

type GetPostListForUserRow struct {
	Title       string
	Url         string
	Description sql.NullString
}

func (q *Queries) GetPostListForUser(ctx context.Context, userID uuid.UUID) ([]GetPostListForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostListForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostListForUserRow
	for rows.Next() {
		var i GetPostListForUserRow
		if err := rows.Scan(&i.Title, &i.Url, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
