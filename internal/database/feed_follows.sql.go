// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
VALUES ($1, $2, $3, $4, $5)
Returning id, created_at, updated_at, user_id, feed_id
`

type CreateFeedFollowsParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getMyFollows = `-- name: GetMyFollows :many
SELECT feed_follows.id, feeds.name, feeds.url FROM feed_follows
    JOIN feeds ON feeds.id = feed_follows.feed_id
                             WHERE feed_follows.user_id = $1
`

type GetMyFollowsRow struct {
	ID   uuid.UUID
	Name string
	Url  string
}

func (q *Queries) GetMyFollows(ctx context.Context, userID uuid.UUID) ([]GetMyFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMyFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMyFollowsRow
	for rows.Next() {
		var i GetMyFollowsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM feed_follows WHERE id = $1 AND user_id = $2
`

type UnfollowParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.ExecContext(ctx, unfollow, arg.ID, arg.UserID)
	return err
}
